{"version":3,"sources":["GuessCount.js","Card.js","Clock.js","HallOfFame.js","HighScoreInput.js","Winner.js","App.js","serviceWorker.js","index.js"],"names":["GuessCount","guesses","className","Card","card","feedback","index","onclick","won","onClick","Clock","state","seconds","this","counterID","setInterval","counter","clearInterval","props","setState","Component","HallOfFame","entries","map","id","date","player","key","saveHOEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","winner","handleWinnerUpdate","event","target","value","toUpperCase","persistWinner","preventDefault","onSubmit","type","autoComplete","onChange","Winner","role","aria-label","App","cards","currentPair","matchedCardIndices","hallOfFame","displayHallOfFrame","handleCardClicked","handleNewPairClosedBy","window","addEventListener","e","keyCode","initGame","indexMatched","includes","newPair","newGuesses","matched","setTimeout","result","candidates","shuffle","SIDE","pop","generateCards","getFeedbackForCard","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.506c73ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './GuessCount.css';\n\n// composant pur fonctionnel ou fonction pure\nconst GuessCount = ({ guesses }) => (\n\t<div className=\"guesses\">\n\t\t{guesses > 54 ? <p>Vous avez perdu ! Rejouez !</p> : <p>Vous avez tenté : {guesses} fois</p>}\n\t</div>\n);\n\n// pour déclarer valeur par défault, déclenchera l'avertissement dans la console si erreur\nGuessCount.propTypes = {\n\tguesses: PropTypes.number.isRequired\n};\n\nexport default GuessCount;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '❓';\n\n// composant pur fonctionnel ou fonction pure\n// la fonction renvoie directement une grappe de DOM virtuel, sans calcul préalable,\n// on dispense des accolades de bloc return\n// card, feedback, onclick sont les props (propriétés)\n// onClick est un évènement dans JSX\nconst Card = ({card, feedback, index, onclick, won}) => {\n    if(!won) {\n        return ( \n        <div className={`card ${feedback}`} onClick={() => onclick(index)}>\n            <span className=\"symbol\">\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n            </span>\n        </div> \n        )\n    } else {\n        return <div></div>\n    }\n\n}\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'hidden',\n        'justMatched',\n        'justMismatched',\n        'visible',\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onclick: PropTypes.func.isRequired\n}\n\nexport default Card","import React, { Component } from 'react';\nimport './Clock.css';\n\nclass Clock extends Component {\n\tstate = {\n\t\tseconds: 0\n\t};\n\n\tcomponentDidMount () {\n\t\tthis.counterID = setInterval(() => this.counter(this.state.seconds), 1000);\n\t}\n\n\tcomponentWillUnmount () {\n\t\tclearInterval(this.counterID);\n\t}\n\n\tcounter (seconds) {\n\t\tif (this.props.guesses === 0) {\n\t\t\tthis.setState({\n\t\t\t\tseconds: 0\n\t\t\t});\n\t\t}\n\t\telse if (this.props.guesses > 36 || this.props.won) {\n\t\t\tthis.setState({\n\t\t\t\tseconds: seconds\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tseconds: seconds + 1\n\t\t\t});\n\t\t}\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"clock\">\n\t\t\t\t<p>\n\t\t\t\t\tTemps écoulé : <strong>{this.state.seconds}</strong> secondes\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Clock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './HallOfFame.css';\n\n// composant pur fonctionnel ou fonction pure\nconst HallOfFame = ({ entries }) => (\n\t<div>\n\t\t<h3>Tableau des gagnants</h3>\n\t\t<table className=\"hallOfFame\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Date</th>\n\t\t\t\t\t<th>Nombre de tentatives</th>\n\t\t\t\t\t<th>Prénom</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{entries.map(({ id, date, guesses, player }) => (\n\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t<td className=\"date\">{date}</td>\n\t\t\t\t\t\t<td className=\"guesses\">{guesses}</td>\n\t\t\t\t\t\t<td className=\"player\">{player}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t\t{/* { entries.map((entry) => (\n                <tr key={entry.id}>\n                    <td className=\"date\">{entry.date}</td>\n                    <td className=\"guesses\">{entry.guesses}</td>\n                    <td className=\"player\">{entry.player}</td>\n                </tr>\n            )) } */}\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n);\n\nHallOfFame.propTypes = {\n\tentries: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.number.isRequired,\n\t\t\tguesses: PropTypes.number.isRequired,\n\t\t\tdate: PropTypes.string.isRequired,\n\t\t\tplayer: PropTypes.string.isRequired\n\t\t})\n\t).isRequired\n};\n\nexport default HallOfFame;\n\n// == Internal helpers\n\nexport const FAKE_HOF = [\n\t{ id: 3, guesses: 18, date: '10/05/2020', player: 'R' },\n\t{ id: 2, guesses: 23, date: '11/05/2020', player: 'T' },\n\t{ id: 1, guesses: 31, date: '06/15/2020', player: 'M' },\n\t{ id: 0, guesses: 48, date: '14/05/2020', player: 'ttvo' }\n];\n\nconst HOF_KEY = '::Memory::HallofFrame',\n\tHOF_MAX_SIZE = 10;\n\nexport function saveHOEntry (entry, onStored){\n\tentry.date = new Date().toLocaleDateString();\n\tentry.id = Date.now();\n\n\t// JSON.parse : string en Objet Js\n\tconst entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]');\n\n\t// vérifie dans le tableau entries, s'il existe la nouvelle valeur guesses qui\n\t// satisfait la condition : cette valeur doit être plus grand ou égal à la valeur guesses de l'entry existant\n\tconst insertionPoint = entries.findIndex(({ guesses }) => guesses >= entry.guesses);\n\n\t// Si on ne trouve pas la nouvelle valeur guesses qui satisfait la condition là haut,\n\t// on l'ajoute son nouveau entry\n\tif (insertionPoint === -1) {\n\t\tentries.push(entry);\n\t}\n\telse {\n\t\tentries.splice(insertionPoint, 0, entry); // sinon, on insère l'entry à l'indice que la nouvelle guesses se trouve\n\t}\n\n\tif (entries.length > HOF_MAX_SIZE) {\n\t\tentries.splice(HOF_MAX_SIZE, entries.length);\n\t}\n\n\t// JSON.stringify : Objet Js en String format Json\n\tlocalStorage.setItem(HOF_KEY, JSON.stringify(entries));\n\tonStored(entries);\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './HighScoreInput.css';\nimport { saveHOEntry } from './HallOfFame';\n\nclass HighScoreInput extends Component {\n\tstate = { winner: '' };\n\n\t// Arrow function for bidding\n\t// on utilise l'initialiseur pour pouvoir passer par référence\n\thandleWinnerUpdate = event => {\n\t\tthis.setState({ winner: event.target.value.toUpperCase() });\n\t};\n\n\t// Arrow function for bidding\n\t// on utilise l'initialiseur pour pouvoir passer par référence\n\tpersistWinner = event => {\n\t\t// empêcher le comportement par défault de la soumission, cad la navigation complète vers un serveur\n\t\tevent.preventDefault();\n\t\tconst newEntry = {\n\t\t\tguesses: this.props.guesses,\n\t\t\tplayer: this.state.winner\n\t\t};\n\t\t// onStored est une fonction de rappel (callback)\n\t\tsaveHOEntry(newEntry, this.props.onStored);\n\t};\n\trender () {\n\t\treturn (\n\t\t\t<form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tBravo ! Entrez ton prénom ou Pressez ENTREE pour une nouvelle partie\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tautoComplete=\"given-name\"\n\t\t\t\t\t\t\tvalue={this.state.winner}\n\t\t\t\t\t\t\tonChange={this.handleWinnerUpdate}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<button type=\"submit\">J'ai gagné !</button>\n\t\t\t\t</p>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nHighScoreInput.propTypes = {\n\tguesses: PropTypes.number.isRequired,\n\tonStored: PropTypes.func.isRequired\n};\n\nexport default HighScoreInput;\n","import React from 'react';\nimport './Winner.css';\n\n// composant pur fonctionnel ou fonction pure\nconst Winner = () => (\n\t<div>\n\t\t<p className=\"winner\">\n\t\t\t<span role=\"img\" aria-label=\"trophy\">\n\t\t\t\t🏆\n\t\t\t</span>\n\t\t</p>\n\t\t<p className=\"winner\">BRAVO ! Pressez ENTREE pour une nouvelle partie.</p>\n\t</div>\n);\n\nexport default Winner;\n","import React, { Component } from 'react';\nimport './App.css';\nimport GuessCount from './GuessCount';\nimport Card from './Card';\nimport shuffle from 'lodash.shuffle';\nimport Clock from './Clock';\nimport HighScoreInput from './HighScoreInput';\nimport HallOfFrame from './HallOfFame';\nimport Winner from './Winner';\n\nconst SIDE = 6,\n\tSYMBOLS = '😀🎉💖🥰🎀😎🌼🧁😇🍀🍩🍑🥳🦋💩🧚‍♀️💍🐬👑🍄🌸🍔',\n\tVISUAL_PAUSE_MSECS = 750,\n\tEND_GAME = 3000;\n\nclass App extends Component {\n\t// un initialiseur de champ d'instance\n\t// les initialiseurs sont exécutés avant tout constructeur\n\t// cards : un champ temporaire\n\t/*  cards = this.generateCards(); */\n\n\t// transforme la méthode d'instance handleCardClicked(card){}\n\t// en un initialiseur de champ d'instance avec une fonction fléchée\n\t// pour garantir conserver le this du composant App\n\t/*   handleCardClicked = card => {\n    console.log(card, \"clicked\", this);\n  } */\n\n\t// ou on peut mettre ces deux initialiseurs dans le constructeur\n\t// pour garantir conserver le this du composant App\n\t/*  constructor(props){\n    super(props);\n    this.cards = this.generateCards();\n    this.handleCardClicked = card => {\n      console.log(card, \"clicked\", this);\n    }\n  }\n*/\n\t// un initialiseur de champ d'instance, et c'est un\n\t// Etat local, strictement privé, les autres composants ne peuvent pas y accéder\n\tstate = {\n\t\tcards: [],\n\t\tcurrentPair: [],\n\t\tguesses: 0,\n\t\tmatchedCardIndices: [], // liste positions des cartes déjà retournés, visible permanente\n\t\thallOfFame: null\n\t};\n\n\t// Arrow function for bidding\n\t// on utilise l'initialiseur pour pouvoir passer par référence\n\tdisplayHallOfFrame = hallOfFame => {\n\t\tthis.setState({ hallOfFame });\n\t};\n\n\tcomponentDidMount () {\n\t\twindow.addEventListener('keyup', e => {\n\t\t\tif (e.keyCode === 13) {\n\t\t\t\tthis.initGame();\n\t\t\t}\n\t\t});\n\t\tthis.initGame();\n\t}\n\n\tgetFeedbackForCard (index) {\n\t\tconst { currentPair, matchedCardIndices } = this.state;\n\t\tconst indexMatched = matchedCardIndices.includes(index); // true or false\n\n\t\tif (currentPair.length < 2) {\n\t\t\treturn indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n\t\t}\n\n\t\tif (currentPair.includes(index)) {\n\t\t\treturn indexMatched ? 'justMatched' : 'justMismatched';\n\t\t}\n\n\t\treturn indexMatched ? 'visible' : 'hidden';\n\t}\n\n\thandleCardClicked = index => {\n\t\tconst { currentPair } = this.state;\n\n\t\tif (currentPair.length === 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (currentPair.length === 0) {\n\t\t\tthis.setState({ currentPair: [ index ] });\n\t\t\treturn;\n\t\t}\n\n\t\tthis.handleNewPairClosedBy(index);\n\t};\n\n\thandleNewPairClosedBy (index) {\n\t\tconst { cards, currentPair, guesses, matchedCardIndices } = this.state;\n\n\t\tconst newPair = [ currentPair[0], index ];\n\t\tconst newGuesses = guesses + 1;\n\t\tconst matched = cards[newPair[0]] === cards[newPair[1]];\n\n\t\tthis.setState({ currentPair: newPair, guesses: newGuesses });\n\n\t\tif (matched) {\n\t\t\tthis.setState({ matchedCardIndices: [ ...matchedCardIndices, ...newPair ] });\n\t\t}\n\n\t\tif (guesses === 54) {\n\t\t\tthis.setState({ cards: [] });\n\t\t\tsetTimeout(() => this.initGame(), END_GAME);\n\t\t}\n\n\t\tsetTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS);\n\t}\n\n\tgenerateCards () {\n\t\tconst result = [],\n\t\t\tsize = SIDE * SIDE,\n\t\t\tcandidates = shuffle(SYMBOLS);\n\n\t\twhile (result.length < size) {\n\t\t\tconst card = candidates.pop();\n\t\t\tresult.push(card, card);\n\t\t}\n\t\treturn shuffle(result);\n\t}\n\n\tinitGame () {\n\t\tthis.setState({\n\t\t\tcards: this.generateCards(),\n\t\t\tcurrentPair: [],\n\t\t\tguesses: 0,\n\t\t\tmatchedCardIndices: [],\n\t\t\thallOfFame: null\n\t\t});\n\t}\n\n\t// index : position de card dans le tableau symbol\n\trender () {\n\t\t// destructure depuis this.state\n\t\tconst { cards, guesses, matchedCardIndices, hallOfFame } = this.state;\n\t\tconst won = matchedCardIndices.length === cards.length; // tous les cartes sont retournées de façon permanente\n\t\treturn (\n\t\t\t<div className=\"memory\">\n\t\t\t\t<GuessCount guesses={guesses} />\n\t\t\t\t<Clock guesses={guesses} won={won} />\n\t\t\t\t{cards.map((card, index) => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tcard={card}\n\t\t\t\t\t\tfeedback={this.getFeedbackForCard(index)}\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\tonclick={this.handleCardClicked}\n\t\t\t\t\t\twon={won}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\n\t\t\t\t{won &&\n\t\t\t\t\tguesses < 55 &&\n\t\t\t\t\t(hallOfFame ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Winner />\n\t\t\t\t\t\t\t<HallOfFrame entries={hallOfFame} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<HighScoreInput guesses={guesses} onStored={this.displayHallOfFrame} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//<React.StrictMode> est composant parent de <App />\n// Donc <App /> est composant enfant de <React.StrictMode>\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["GuessCount.js","Card.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["GuessCount","guesses","className","Card","card","feedback","index","onclick","onClick","Clock","state","seconds","this","counterID","setInterval","counter","clearInterval","props","setState","won","Component","App","cards","currentPair","matchedCardIndices","handleCardClicked","length","handleNewPairClosedBy","window","addEventListener","e","keyCode","initGame","indexMatched","includes","newPair","newGuesses","matched","setTimeout","result","candidates","shuffle","SIDE","pop","push","generateCards","map","getFeedbackForCard","key","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7f74c8a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './GuessCount.css'\n\n// composant pur fonctionnel ou fonction pure\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses > 36 ? \n<p>Vous avez perdu ! Rejouez !</p> : <p>Vous avez tent√© : {guesses} fois</p>}</div>\n\n// pour d√©clarer valeur par d√©fault, d√©clenchera l'avertissement dans la console si erreur\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired\n}\n\nexport default GuessCount","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '‚ùì';\n\n// composant pur fonctionnel ou fonction pure\n// la fonction renvoie directement une grappe de DOM virtuel, sans calcul pr√©alable,\n// on dispense des accolades de bloc return\n// card, feedback, onclick sont les props (propri√©t√©s)\n// onClick est un √©v√®nement dans JSX\nconst Card = ({card, feedback, index, onclick}) => (\n    //JSX\n    <div className={`card ${feedback}`} onClick={() => onclick(index)}>\n        <span className=\"symbol\">\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n        </span>\n    </div>\n)\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'hidden',\n        'justMatched',\n        'justMismatched',\n        'visible',\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onclick: PropTypes.func.isRequired\n}\n\nexport default Card","import React, { Component } from 'react';\nimport './Clock.css';\n\n\nclass Clock extends Component {\n  state = {\n    seconds: 0\n  }\n\n  componentDidMount(){\n    this.counterID = setInterval(() => this.counter(this.state.seconds), 1000);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.counterID);\n  \n  }\n\n  counter(seconds){\n    if (this.props.guesses === 0){\n      this.setState({\n        seconds: 0\n      });\n    } else if (this.props.guesses > 36 || this.props.won) {\n      this.setState({\n        seconds: seconds,\n      });\n    } else {\n      this.setState({\n        seconds: seconds + 1,\n      });\n    }    \n  \n  }\n\n  render(){\n    return (\n      <div className=\"clock\">\n        <p>Temps √©coul√© : <strong>{ this.state.seconds }</strong> secondes</p>\n      </div>\n\n    )\n  }\n\n}\n\nexport default Clock\n","import React, { Component } from 'react';\nimport './App.css';\nimport GuessCount from './GuessCount';\nimport Card from './Card';\nimport shuffle from 'lodash.shuffle';\nimport Clock from './Clock';\n\n\nconst SIDE = 6,\n      SYMBOLS = \"üòÄüéâüíñü•∞üéÄüòéüåºüßÅüòáüçÄüç©üçëü•≥ü¶ãüí©üßö‚Äç‚ôÄÔ∏èüíçüê¨üëëüçÑüå∏üçî\",\n      VISUAL_PAUSE_MSECS = 750,\n      END_GAME = 3000;\n\n\nclass App extends Component {\n  // un initialiseur de champ d'instance\n  // les initialiseurs sont ex√©cut√©s avant tout constructeur\n  // cards : un champ temporaire \n /*  cards = this.generateCards(); */\n\n  // transforme la m√©thode d'instance handleCardClicked(card){}\n  // en un initialiseur de champ d'instance avec une fonction fl√©ch√©e\n  // pour garantir conserver le this du composant App\n/*   handleCardClicked = card => {\n    console.log(card, \"clicked\", this);\n  } */\n\n  // ou on peut mettre ces deux initialiseurs dans le constructeur\n   // pour garantir conserver le this du composant App\n/*  constructor(props){\n    super(props);\n    this.cards = this.generateCards();\n    this.handleCardClicked = card => {\n      console.log(card, \"clicked\", this);\n    }\n  }\n*/\n  // un initialiseur de champ d'instance, et c'est un\n  // Etat local, strictement priv√©, les autres composants ne peuvent pas y acc√©der\n  state = {\n    cards: [],\n    currentPair: [],\n    guesses: 0,\n    matchedCardIndices: [],// liste positions des cartes d√©j√† retourn√©s, visible permanente\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keyup\", (e) => {\n\t\t\tif(e.keyCode === 13){\n\t\t\t\tthis.initGame();\n\t\t\t}\n\t\t});\n\t\tthis.initGame();\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state;\n    const indexMatched = matchedCardIndices.includes(index); // true or false\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n\n  }\n\n  handleCardClicked = index => {\n    const { currentPair } = this.state;\n\n    if(currentPair.length === 2) {\n      return;\n    }\n\n    if(currentPair.length === 0) {\n      this.setState({ currentPair: [index]});\n      return;\n    }\n\n    this.handleNewPairClosedBy(index);\n\n  }\n\n  handleNewPairClosedBy(index){\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state;\n\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n\n    this.setState({ currentPair: newPair, guesses: newGuesses });\n\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair]})\n    }\n\n    if(guesses === 36) {\n      \n      setTimeout(() => this.initGame(), END_GAME);\n    }\n\n    setTimeout(() => this.setState({currentPair:[]}), VISUAL_PAUSE_MSECS);\n\n  }\n\n  generateCards() {\n    const result = [],\n      size = SIDE * SIDE,\n      candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n    return shuffle(result);\n  }\n\n  initGame(){\n    this.setState({\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      matchedCardIndices: [],\n    })\n  }\n\n  // index : position de card dans le tableau symbol\n  render() {\n    // destructure depuis this.state\n    const { cards, guesses, matchedCardIndices } = this.state;\n    const won = matchedCardIndices.length === cards.length; // tous les cartes sont retourn√©es de fa√ßon permanente\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        <Clock guesses={guesses} won={won} />\n        {cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)}\n            key={index}\n            index={index}\n            onclick={this.handleCardClicked}\n          />\n        ))}\n\n        {won && <div><p className=\"winner\"><span role=\"img\" aria-label=\"trophy\">üèÜ</span></p>\n        <p className=\"winner\">BRAVO ! Pressez ENTREE pour une nouvelle partie.</p></div> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//<React.StrictMode> est composant parent de <App />\n// Donc <App /> est composant enfant de <React.StrictMode>\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}